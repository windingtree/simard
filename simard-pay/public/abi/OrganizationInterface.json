{
  "contractName": "OrganizationInterface",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "parentEntity",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "entityDirector",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_orgJsonUri",
          "type": "string"
        },
        {
          "name": "_orgJsonHash",
          "type": "bytes32"
        },
        {
          "name": "subsidiaryDirector",
          "type": "address"
        },
        {
          "name": "packageName",
          "type": "string"
        },
        {
          "name": "contractName",
          "type": "string"
        }
      ],
      "name": "createSubsidiary",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "subsidiaryAddress",
          "type": "address"
        }
      ],
      "name": "toggleSubsidiary",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newEntityDirectorAddress",
          "type": "address"
        }
      ],
      "name": "changeEntityDirector",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "subsidiaryAddress",
          "type": "address"
        }
      ],
      "name": "getSubsidiary",
      "outputs": [
        {
          "name": "id",
          "type": "address"
        },
        {
          "name": "state",
          "type": "bool"
        },
        {
          "name": "confirmed",
          "type": "bool"
        },
        {
          "name": "director",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getSubsidiaries",
      "outputs": [
        {
          "name": "subsidiariesList",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "subsidiaryAddress",
          "type": "address"
        },
        {
          "name": "newSubsidiaryDirector",
          "type": "address"
        }
      ],
      "name": "transferDirectorOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "linkDirectory",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "unlinkDirectory",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getOrgJsonUri",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getOrgJsonHash",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_orgJsonUri",
          "type": "string"
        }
      ],
      "name": "changeOrgJsonUri",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_orgJsonHash",
          "type": "bytes32"
        }
      ],
      "name": "changeOrgJsonHash",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "schemaVersion": "3.0.11",
  "updatedAt": "2020-02-11T15:05:25.428Z",
  "devdoc": {
    "details": "If you are creating your own implementation of Winding Tree Organization, this is the minimal interface that you must fullfill. Without it, the Organization won't be added into the SegmentDirectory. For checked interface ID, head over to the implementation of `addOrganization` in `SegmentDirectory`. * This is not meant to be used by libraries that try to operate with the organization as any data manipulation methods are intentionally omitted. It can be used only for reading data.",
    "methods": {
      "changeEntityDirector(address)": {
        "details": "Change entity director",
        "params": {
          "newEntityDirectorAddress": "New entity director address"
        }
      },
      "changeOrgJsonHash(bytes32)": {
        "details": "`changeOrgJsonHash` Allows owner to change Organization's orgJsonHash.",
        "params": {
          "_orgJsonHash": "keccak256 hash of the new ORG.JSON contents."
        }
      },
      "changeOrgJsonUri(string)": {
        "details": "`changeOrgJsonUri` Allows owner to change Organization's orgJsonUri.",
        "params": {
          "_orgJsonUri": "New orgJsonUri pointer of this Organization"
        }
      },
      "createSubsidiary(string,bytes32,address,string,string)": {
        "details": "Create subsidiary",
        "params": {
          "_orgJsonHash": "keccak256 hash of the new ORG.JSON contents",
          "_orgJsonUri": "orgJsonUri pointer",
          "contractName": "Name of the organization contract.  Will be \"Organization\" if empty string provided",
          "packageName": "Name of the package where the contract is contained.  Will be \"wt-contracts\" if empty string provided",
          "subsidiaryDirector": "Subsidiary director address"
        }
      },
      "getOrgJsonHash()": {
        "details": "Returns keccak256 hash of raw ORG.JSON contents. This should be used to verify that the contents of ORG.JSON has not been tampered with. It is a responsibility of the Organization owner to keep this hash up to date.",
        "return": "{\" \": \"Current ORG.JSON hash.\"}"
      },
      "getOrgJsonUri()": {
        "details": "Returns the URI of ORG.JSON file stored off-chain.",
        "return": "{\" \": \"Current ORG.JSON URI.\"}"
      },
      "getSubsidiaries()": {
        "details": "Return an array of subsidiaries addresses",
        "return": "{ \"subsidiariesList\": \"Array of active subsidiaries\" }"
      },
      "getSubsidiary(address)": {
        "details": "Return subsidiary organization parmeters",
        "params": {
          "subsidiaryAddress": "Subsidiary organization address"
        },
        "return": "{ \"id\": \"Subsidiary address\", \"state\": \"Subsidiary state\", \"confirmed\": \"Subsidiary director ownership confirmation state\", \"director\": \"Entity director address\" }     "
      },
      "linkDirectory()": {
        "details": "Liking with SegmentDirectory.  This function have to be called by SegmentDirectory contract only"
      },
      "owner()": {
        "details": "Returns the address of the current owner.",
        "return": "{\" \": \"Current owner address.\"}"
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created.     * This function call must use less than 30 000 gas."
      },
      "toggleSubsidiary(address)": {
        "details": "Toggle subsidiary state",
        "params": {
          "subsidiaryAddress": "Subsidiary organization address"
        }
      },
      "transferDirectorOwnership(address,address)": {
        "details": "Transfer subsidiary director ownership",
        "params": {
          "newSubsidiaryDirector": "New subsidiary director address",
          "subsidiaryAddress": "Subsidiary organization address"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      },
      "unlinkDirectory()": {
        "details": "Removes a link with SegmentDirectory.  This function have to be called by SegmentDirectory contract only"
      }
    },
    "title": "Minimal 0xORG interface "
  },
  "userdoc": {
    "methods": {}
  }
}
