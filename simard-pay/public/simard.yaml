openapi: 3.0.1

info:
  title: Simard
  description: 'Interface documentation for the REST API of Simard, the Winding Tree Settlement Platform'
  contact:
    email: mathieu@windingtree.com
  license:
    name: Apache License
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1

servers:
- url: /api/v1
  description: Current Server

tags:
- name: balances
  description: Operations with Balances
- name: quotes
  description: Operations with currency conversions
- name: accounts
  description: Operation with recipient accounts
- name: cards
  description: Operation with virtual cards
- name: tokens
  description: Operations with card tokens
- name: test
  description: Operations available only in test environments

paths:
  # ** Balances **
  /balances:
    get:
      tags:
      - balances
      summary: Get the balances associated to the authenticated ORG.ID
      operationId: getBalances
      responses:
        200:
          description: The balances in each currency
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    total:
                      $ref: '#/components/schemas/Amount'
                    reserved:
                      $ref: '#/components/schemas/Amount'
                    available:
                      $ref: '#/components/schemas/Amount'
                example:
                  {
                    "EUR": {
                      "total": "12500.00",
                      "reserved": "4500.00",
                      "available": "8000.00"
                    },
                    "CLP": {
                      "total": "45000",
                      "reserved": "0",
                      "available": "45000"
                    }
                  }
        400:
          description: The sent request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - read:balances

  /balances/depositInstructions:
    get:
      tags:
      - balances
      summary: Get the deposit instructions
      operationId: getDepositInstructions
      responses:
        200:
          description: The account details to make a deposit to, indexed by currency
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    iban:
                      $ref: '#/components/schemas/Iban'
                    bic:
                      $ref: '#/components/schemas/Bic'
                    bankName:
                      type: string
                      example: "Handelsbank"
                    accountHolderName:
                      type: string
                      example: "Acme Corp"
                    bankAddress:
                      type: object
                      properties:
                        addressFirstLine:
                          type: string
                          example: "Elsenheimer Str. 41"
                        postCode:
                          type: string
                          example: "80687"
                        city:
                          type: string
                          example: "München"
                        country:
                          type: string
                          example: "Germany"
                        stateCode:
                          type: string
                          example: "NY"
                example: {
                  "EUR": {
                    "iban": "DE51 7001 0000 0000 0000 01",
                    "bic": "DEKTDE7GXXX",
                    "bankName": "Handelsbank",
                    "accountHolderName": "Company Name",
                    "bankAddress": {
                      "addressFirstLine": "Elsenheimer Str. 41",
                      "postCode": "80687",
                      "city": "München",
                      "country": "Germany",
                      "stateCode": null
                      }
                    }
                  }
        400:
          description: The sent request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - read:balances

  /balances/deposits:
    post:
      tags:
        - balances
      summary: Create a deposit
      operationId: deposit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deposit'
      responses:
        200:
          description: The settlement identifier associated to the deposit
          content:
            application/json:
              schema:
                properties:
                  settlementId:
                    $ref: '#/components/schemas/UUID'
        400:
          description: The sent request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - write:balances

  /balances/swap:
    post:
      tags:
        - balances
      summary: Swap currencies using quotes. Balance must be sufficient.
      operationId: swap
      requestBody:
        content:
          application/json:
            schema:
              properties:
                quotes:
                  description: Array of quoteId created using the quotes ressource
                  type: array
                  items:
                    $ref: '#/components/schemas/UUID'

      responses:
        200:
          description: Settlements have been created for the provided quotes
          content:
            application/json:
              schema:
                properties:
                  sources:
                    description: The settlement identifiers associated to the funding of quotes. Order not guaranteed.
                    type: array
                    items:
                      $ref: '#/components/schemas/UUID'
                  targets:
                    description: The settlement identifiers associated to the deposit of quotes. Order not guaranteed.
                    type: array
                    items:
                      $ref: '#/components/schemas/UUID'
        400:
          description: The request is incorrect, or balance is insufficient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        403:
          description: One of the quote is not allowed to be retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        404:
          description: One of the quote has not been found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - write:balances


  /balances/guarantees:
    post:
      tags:
      - balances
      summary: Creates a financial guarantee on the balance
      operationId: reserveBalance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Guarantee'
            example:
              {
                "currency": "USD",
                "amount": "300.00",
                "creditorOrgId": "0x0000000000000000000000000000000000000000000000000000000000005121",
                "expiration": "2020-03-30T13:37:38.835Z",
              }

      responses:
        200:
          description: The guarantee identifier
          content:
            application/json:
              schema:
                properties:
                  guaranteeId:
                    $ref: '#/components/schemas/UUID'
        400:
          description: The sent request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - write:balances

  /balances/guarantees/{guaranteeId}:
    parameters:
    - name: guaranteeId
      in: path
      description: Guarantee Identifier
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    get:
      tags:
        - balances
      summary: Allows to retrieve a guarantee for which the ORG.ID is a party
      operationId: getGuarantee
      responses:
        200:
          description: The guarantee details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guarantee'
        400:
          description: The sent request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - read:balances

    delete:
      tags:
        - balances
      summary: Allows to cancel an expired guarantee
      operationId: cancelGuarantee
      responses:
        200:
          description: Guarantee has been canceled
          content:
            application/json: {}
            example: {}
        400:
          description: The sent request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - write:balances

  /balances/guarantees/{guaranteeId}/claim:
    parameters:
    - name: guaranteeId
      in: path
      description: Guarantee Identifier
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    post:
      tags:
        - balances
      summary: Allows the receiving ORG.ID to claim a guarantee
      operationId: claimGuarantee
      responses:
        200:
          description: Guarantee has been settled
          content:
            application/json:
              schema:
                properties:
                  settlementId:
                    $ref: '#/components/schemas/UUID'

        400:
          description: The sent request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - write:balances

  /balances/guarantees/{guaranteeId}/claimWithCard:
    parameters:
    - name: guaranteeId
      in: path
      description: Guarantee Identifier
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    post:
      tags:
        - balances
      summary: Allows to claim a guarantee and get a virtual card to spend
      operationId: claimGuaranteeWithCard
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                expiration:
                  description: Validity of the virtual card
                  type: string
                  format: date-time
      responses:
        200:
          description: Card has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        400:
          description: The parameters provided are incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - write:balances

  /balances/{currency}/withdraw:
    post:
      tags:
      - balances
      parameters:
      - name: currency
        in: path
        description: ISO4217 Currency Code of the balance to withdraw
        required: true
        schema:
          $ref: '#/components/schemas/Currency'
      summary: Allows to withdraw a balance to a configured account
      operationId: withdraw
      responses:
        200:
          description: Withdrawal request has been accepted
          content:
            application/json:
              schema:
                properties:
                  settlementId:
                    $ref: '#/components/schemas/UUID'
        400:
          description: The sent request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - write:balances

  /balances/simulateDeposit:
    post:
      tags:
      - test
      summary: TEST ONLY Simulates a bank transfer deposit
      operationId: simulateBankDeposit
      requestBody:
        content:
          application/json:
            schema:
              properties:
                currency:
                  $ref: '#/components/schemas/Currency'
                amount:
                  $ref: '#/components/schemas/Amount'
      responses:
        200:
          description: The credit identifier
          content:
            application/json:
              schema:
                properties:
                  settlementId:
                    $ref: '#/components/schemas/UUID'
        400:
          description: The sent request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - write:balances

  /accounts:
    post:
      tags:
      - accounts
      summary: Provides a recipient account
      operationId: registerAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'

      responses:
        200:
          description: Identifier of the recipient account
          content:
            application/json:
              schema:
                properties:
                  accountId:
                    $ref: '#/components/schemas/UUID'
        400:
          description: The sent request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - orgid_auth:
        - write:accounts

    get:
      tags:
      - accounts
      summary: Get the list of accounts
      responses:
        200:
          description: Indexed list of accounts
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Account'
                example:
                  {
                    "9817cb06-0325-4535-aa74-00000000000": {
                      "currency" : "CHF",
                      "iban": "CH9300762010123456789"
                    }
                  }
        400:
          description: The sent request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - read:accounts

  /accounts/{accountId}:
    parameters:
    - name: accountId
      in: path
      description: Account Identifier to update
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    post:
      tags:
      - accounts
      summary: Update an existing account
      operationId: updateAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        200:
          description: Identifier of the registered account
          content:
            application/json:
              schema:
                properties:
                  accountId:
                    $ref: '#/components/schemas/UUID'
        400:
          description: The sent request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The provided accountId does not exist for this ORG.ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - write:accounts

    get:
      tags:
      - accounts
      summary: Get the list of accounts
      responses:
        200:
          description: Indexed list of accounts
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Account'
                example:
                  {
                    "currency": "EUR",
                    "iban": "FR12345678"
                  }
        400:
          description: The sent request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The provided accountId does not exist for this ORG.ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - read:accounts

    delete:
      tags:
      - accounts
      summary: Delete an account
      responses:
        200:
          description: Account has been deleted
          content:
            application/json: {}
            example: {}
        400:
          description: The sent request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The provided accountId does not exist for this ORG.ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      security:
      - orgid_auth:
        - write:accounts

  /cards:
    post:
      tags:
      - cards
      summary: Creates a single use virtual card from the balance
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                currency:
                  $ref: '#/components/schemas/Currency'
                amount:
                  $ref: '#/components/schemas/Amount'
                expiration:
                  type: string
                  format: date-time
      responses:
        200:
          description: Card has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        400:
          description: The parameters provided are incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - orgid_auth:
        - write:balances

  /cards/{cardId}:
    parameters:
    - name: cardId
      in: path
      description: Card Identifier to cancel
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    delete:
      tags:
      - cards
      summary: Cancels a virtual card, returning unused balance
      operationId: cancelCard
      responses:
        200:
          description: Card has been deleted
          content:
            application/json: {}
            example: {}
        400:
          description: The parameters provided are incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The provided card identifier is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The provided card identifier is not accessible by the authenticed organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - orgid_auth:
        - write:balances

  /quotes:
    post:
      tags:
      - quotes
      summary: Request a quote for conversion between balances
      operationId: createQuote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quote'
      responses:
        200:
          description: Quote has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        400:
          description: The parameters provided are incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The organization is not allowed to create quotes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /quotes/{quoteId}:
    parameters:
    - name: quoteId
      in: path
      description: Identifier of the quote to retrieve
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    get:
      tags:
      - quotes
      summary: Retrieve a quote
      operationId: retrieveQuote
      responses:
        200:
          description: Quote has been retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        400:
          description: The parameters provided are incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The organization is not allowed to access this quotes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The quote does not exist or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /rates:
    parameters:
    - name: source
      in: query
      description: Source currency
      required: true
      schema:
        $ref: '#/components/schemas/Currency'
    - name: target
      in: query
      description: Target currency
      required: true
      schema:
        $ref: '#/components/schemas/Currency'
    get:
      tags:
      - quotes
      summary: Retrieve the mid-market rate for a pair of currencies
      operationId: getRate
      responses:
        200:
          description: Rate has been retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  rate:
                    $ref: '#/components/schemas/Rate'
        400:
          description: The parameters provided are incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The organization is not allowed to access rates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens:
    post:
      tags:
      - tokens
      summary: Create a card token
      operationId: postToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCreate'
      responses:
        200:
          description: Card Guarantee token has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        400:
          description: The parameters provided are incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The card guarantee was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        502:
          description: The upstream server encounter an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{tokenId}:
    parameters:
    - name: tokenId
      in: path
      description: Token Identifier
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    get:
      tags:
      - tokens
      summary: Retrieve a card token guarantee
      operationId: getToken
      responses:
        200:
          description: Card Token has been retrieved
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Token'
                  - $ref: '#/components/schemas/TravelAccountToken'


        400:
          description: The parameters provided are incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The organization is not allowed to access this token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The card token was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        502:
          description: The upstream server encounter an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - tokens
      summary: Delete a card token
      operationId: deleteToken
      responses:
        200:
          description: Card Token has been deleted
          content:
            application/json: {}
            example: {}
        400:
          description: The parameters provided are incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The organization is not allowed to access this token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The card guarantee was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/travel-account:
    post:
      tags:
      - tokens
      summary: Create a token from the American Express travel account
      operationId: createTravelAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TravelAccountTokenCreate'
      responses:
        200:
          description: Travel Account token has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TravelAccountToken'
        400:
          description: The parameters provided are incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The card guarantee was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        502:
          description: The upstream server encounter an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{tokenId}/travel-components:
    parameters:
    - name: tokenId
      in: path
      description: Token Identifier
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    post:
      tags:
      - tokens
      summary: Indicates travel components for a given token
      operationId: createTravelComponents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TravelComponents'
      responses:
        200:
          description: Travel components where added to the token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TravelComponents'
        400:
          description: The parameters provided are incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The token identifier was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        502:
          description: The upstream server encounter an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /intents:
    post:
      tags:
      - intents
      summary: Create a payment Intent
      operationId: postIntent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Intent'
      responses:
        200:
          description: Payment intent has been created
          content:
            application/json:
              schema:
                properties:
                  secureFieldTransactionId:
                    description: The transactionId to use in Secure Fields
                    type: string
        400:
          description: The parameters provided are incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: The server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        502:
          description: An upstream server encountered an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    UUID:
      description: Unique identifier
      type: string
      format: uuid
      minLength: 36
      maxLength: 36
      pattern: '^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$'
      example: '11111111-2222-3333-4444-000000000001'

    Iban:
      description: The International Bank Account Number
      type: string
      pattern: "^[A-Z]{2}[A-Z0-9]+$"
      example: "CH9300762011623852957"

    Bic:
      description: The Swift/BIC Code as per ISO 9362
      type: string
      pattern: "^[A-Z0-9]{8-11}$"
      example: "CRESCHZZXXX"

    Account:
      description: The reference of an account
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        iban:
          $ref: '#/components/schemas/Iban'

    Amount:
      description: A monetary amount in a given currency
      type: string
      pattern: "^[0-9]+(.[0-9]+)?$"
      example: "12500.00"

    Rate:
      description: A conversion rate between currencies
      type: string
      pattern: "^[0-9]+(.[0-9]+)?$"
      example: "0.0985"

    Currency:
      description: A three letter currency code as per ISO4217
      type: string
      pattern: "^[A-Z]{3}$"
      example: "EUR"

    OrgId:
      description: ORG.ID contract address identifier
      type: string
      pattern: '^0x[0-9a-f]{40}$'
      minLength: 42
      maxLength: 42
      example: '0x0000000000000000000000000000000000099222'

    Guarantee:
      description: A guarantee made by a distributor to a supplier
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        amount:
          $ref: '#/components/schemas/Amount'
        creditorOrgId:
          $ref: '#/components/schemas/OrgId'
        debtorOrgId:
          $ref: '#/components/schemas/OrgId'
        expiration:
          type: string
          format: date-time

    Deposit:
      description: A deposit made by a participant to Simard Pay
      type: object
      properties:
        instrument:
          description: "Indicates the instrument used as a funding mechanism"
          type: string
          enum:
          - blockchain
        chain:
          description: "For blockchain funding source, indicates the chain"
          type: string
          enum:
          - ethereum
        transactionHash:
          description: "For blockchain funding source, indicates the transaction hash"
          type: string
          pattern: '^0x[0-9a-f]{64}$'
          example: 0x000000000000000000000000000000000000000000000000000000000000a121
        quoteId:
          $ref: '#/components/schemas/UUID'

    Quote:
      description: A quote for exchange between currencies
      type: object
      properties:
        quoteId:
          description: Identifier of a quote
          type: string
          format: uuid
        sourceCurrency:
          $ref: '#/components/schemas/Currency'
        sourceAmount:
          $ref: '#/components/schemas/Amount'
        targetCurrency:
          $ref: '#/components/schemas/Currency'
        targetAmount:
          $ref: '#/components/schemas/Amount'
        rate:
          $ref: '#/components/schemas/Rate'

    Card:
      description: A payment card
      type: object
      properties:
        id:
          description: Identifier of a card
          type: string
          format: uuid
        brand:
          description: The brand of the card
          type: string
          enum:
          - visa
          - mastercard
          - amex
          - bancontact
          - diners
          - discover
          - jcb
          - maestro
          - uatp
          - unionpay
          - electron
        accountNumber:
          description: The account number of the card
          type: string
          pattern: '^[0-9]{13,19]$'
          example: '4444333322221111'
        expiryMonth:
          description: The month of the card expiration
          type: string
          pattern: '^[0-9]{2}$'
          example: '04'
        expiryYear:
          description: The year of the card expiration
          type: string
          pattern: '^[0-9]{4}$'
          example: '2021'
        cvv:
          description: The Card Verification Value of the card
          type: string
          pattern: '^[0-9]{3,4}$'
          example: '123'
        type:
          description: Type of the card
          type: string
          enum:
          - debit
          - credit
          - prepaid

    Token:
      description: A tokenized payment card
      type: object
      properties:
        id:
          description: Identifier of a card token
          type: string
          format: uuid
        creatorOrgId:
          $ref: '#/components/schemas/OrgId'
        receiverOrgId:
          $ref: '#/components/schemas/OrgId'
        brand:
          description: The brand of the card
          type: string
          enum:
          - visa
          - mastercard
          - amex
          - bancontact
          - diners
          - discover
          - jcb
          - maestro
          - uatp
          - unionpay
          - electron
        aliasAccountNumber:
          description: The alias account number of the card
          type: string
          pattern: '^[-A-Za-z0-9]+$'
          example: 'AAABcHxr-sDssdexyrAAAfyXWIgaAF40'
        maskedAccountNumber:
          description: The masked account number of the card
          type: string
          pattern: '^[0-9]{6}X+[0-9]{4}$'
          example: '444433XXXXXX1111'
        expiryMonth:
          description: The month of the card expiration
          type: string
          pattern: '^[0-9]{2}$'
          example: '04'
        expiryYear:
          description: The year of the card expiration
          type: string
          pattern: '^[0-9]{4}$'
          example: '2021'
        aliasCvv:
          description: The alias Card Verification Value of the card
          type: string
          pattern: '^[-A-Za-z0-9]+$'
          example: 'mVHJkLRrRX-vb9uUzEM40RUN'
        type:
          description: Type of the card
          type: string
          enum:
          - debit
          - credit
        billingAddress:
          $ref: '#/components/schemas/BillingAddress'
        3ds:
          $ref: '#/components/schemas/3DS'

    TravelAccountToken:
      description: A tokenized payment card with amex
      type: object
      properties:
        id:
          description: Identifier of a card token
          type: string
          format: uuid
        creatorOrgId:
          $ref: '#/components/schemas/OrgId'
        receiverOrgId:
          $ref: '#/components/schemas/OrgId'
        brand:
          description: The brand of the card
          type: string
          example: 'amex'
        aliasAccountNumber:
          description: The alias account number of the card
          type: string
          pattern: '^[-A-Za-z0-9]+$'
          example: 'AAABcHxr-sDssdexyrAAAfyXWIgaAF40'
        maskedAccountNumber:
          description: The masked account number of the card
          type: string
          pattern: '^[0-9]{6}X+[0-9]{4}$'
          example: '444433XXXXXX1111'
        expiryMonth:
          description: The month of the card expiration
          type: string
          pattern: '^[0-9]{2}$'
          example: '04'
        expiryYear:
          description: The year of the card expiration
          type: string
          pattern: '^[0-9]{4}$'
          example: '2021'
        aliasCvv:
          description: The alias Card Verification Value of the card
          type: string
          pattern: '^[-A-Za-z0-9]+$'
          example: 'mVHJkLRrRX-vb9uUzEM40RUN'
        type:
          description: Type of the card
          type: string
          example: 'debit'
        amount:
          description: Token Amount
          type: string
          example: '125.50'
        currency:
          description: Token currency
          type: string
          example: 'EUR'
        billingAddress:
          $ref: '#/components/schemas/BillingAddress'

    BillingAddress:
      description: The billing address of a card
      type: object
      properties:
        countryCode:
          description: The 2-letters ISO country code
          type: string
          pattern: '^[A-Z]{2}$'
          example: 'US'
        stateProv:
          description: The state or province code (country specific)
          type: string
          pattern: '^[A-Z]+$'
          example: 'FL'
        postalCode:
          description: The postal or zip code
          type: string
          pattern: '^[-A-Z0-9 ]+$'
          example: '10114'
        cityName:
          description: The name of the city
          type: string
          pattern: '^[-A-Z0-9 \'']+$'
          example: 'MIAMI'
        street:
          description: The street address
          type: string
          pattern: '^[-A-Z0-9 \'']+$'
          example: '1 CIRCLE ROAD'

    TokenCreate:
      description: Parameters required to create a token
      type: object
      properties:
        receiverOrgId:
          $ref: '#/components/schemas/OrgId'
        secureFieldTransactionId:
          description: Transaction Identifier returned by the Secure Field
          type: string
          pattern: '^[0-9]+$'
        expiryMonth:
          description: The month of the card expiration
          type: string
          pattern: '^[0-9]{2}$'
          example: '04'
        expiryYear:
          description: The year of the card expiration
          type: string
          pattern: '^[0-9]{4}$'
          example: '2021'
        billingAddress:
          description: The billing address of the card
          type: object
          properties:
            countryCode:
              description: The 2-letters ISO country code
              type: string
              pattern: '^[A-Z]{2}$'
              example: 'US'
            stateProv:
              description: The state or province code (country specific)
              type: string
              pattern: '^[A-Z]+$'
              example: 'FL'
            postalCode:
              description: The postal or zip code
              type: string
              pattern: '^[-A-Z0-9 ]+$'
              example: '10114'
            cityName:
              description: The name of the city
              type: string
              pattern: '^[-A-Z0-9 \'']+$'
              example: 'MIAMI'
            street:
              description: The street address
              type: string
              pattern: '^[-A-Z0-9 \'']+$'
              example: '1 CIRCLE ROAD'

    TravelAccountTokenCreate:
      description: Parameters required to create a travel account token
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        amount:
          $ref: '#/components/schemas/Amount'
        receiverOrgId:
          $ref: '#/components/schemas/OrgId'
        customerReferences:
          $ref: '#/components/schemas/TravelAccountCustomerReferences'

    TravelAccountCustomerReferences:
      description: Properties to enable corporate accounting reconciliation
      type: object
      properties:
        costCenter:
          description: The cost center to expense this trip
          type: string
          pattern: '^[-A-Za-z0-9]+$'
          example: 'ABCDE-4'
        businessUnit:
          description: The business unit to expense for this trip
          type: string
          pattern: '^[- A-Zz-z0-9]+$'
          example: 'ABCDE-4'
        projectCode:
          description: The project code
          type: string
          pattern: '^[-A-Za-z0-9]+$'
          example: 'ABCDE-4'
        jobNumber:
          description: The job number
          type: string
          pattern: '^[-A-Za-z0-9]+$'
          example: 'ABCDE-4'
        employeeId:
          description: An employee unique identifier
          type: string
          pattern: '^[-A-Za-z0-9]+$'
          example: 'ABCDE-4'
        travellerType:
          description: The type of traveller
          type: string
          pattern: '^[-A-Za-z0-9]+$'
          example: 'ABCDE-4'
        travellerLastName:
          description: The last name of the main traveller for this trip
          type: string
          pattern: '^[- A-Za-z]+$'
          example: 'ABCDE-4'
        travellerFirstName:
          description: The first name of the main traveller for this trip
          type: string
          pattern: '^[- A-Za-z]+$'
          example: 'ABCDE-4'
        approverLastName:
          description: The last name of the approver for this trip
          type: string
          pattern: '^[- A-Za-z]+$'
          example: 'ABCDE-4'
        approverFirstName:
          description: The first name of the approver for this trip
          type: string
          pattern: '^[- A-Za-z]+$'
          example: 'ABCDE-4'

    TravelComponentAmounts:
      description: Contains the costing breakdown for a travel component
      type: object
      properties:
        total:
          description: Total amount for this travel component (including taxes)
          $ref: '#/components/schemas/Amount'
        base:
          description: Base amount for this travel component (exluding taxes)
          $ref: '#/components/schemas/Amount'
        taxes:
          description: List of the tax items
          type: array
          items:
            type: object
            properties:
              amount:
                description: Amount of the tax item in token currency
                $ref: '#/components/schemas/Amount'
              percentageRate:
                description: Percentage of the rate - 19.5 for 19.5%
                $ref: '#/components/schemas/Amount'
              iataCode:
                description: IATA Tax Code of the tax item (for air only)
                type: string
                pattern: '^[0-9AZ]{2}$'
                example: 'YQ'
              taxId:
                description: Tax code to identify the type of tax (for non-air)
                type: string
                enum:
                  - value_added         # VAT
                  - goods_and_services  # GST
                  - provincial_sales    # PST
                  - quebec_sales        # QST
              countryCode:
                description: ISO3166-1 country code collecting the tax (when applicable)
                type: string
                pattern: '^[AZ]{2}$'
                example: 'US'

    TravelComponentAir:
      description: A air component of a trip
      type: object
      properties:
        componentType:
            description: A fixed value to identify Air components
            type: string
            enum:
              - air
        amounts:
          $ref: '#/components/schemas/TravelComponentAmounts'
        recordLocator:
          description: The PNR Record Locator
          type: string
          pattern: '^[0-9AZ]{6}$'
          example: 'ZU7CKB'
        documentType:
          description: The type of electronic document
          type: string
          enum:
            - TKT
            - EMD
          example: 'TKT'
        contactEmail:
          description: Primary contact email address of a traveller
          type: string
          format: email
          example: 'email@domain.com'
        documentNumber:
          description: The electronic document number
          type: string
          pattern: '^[0-9]{14}$'
          example: '15147568054247'
        documentIssuanceDate:
          description: The date of issuance of the document, using the format YYYY-MM-DD
          type: string
          format: date
          example: '2021-12-01'
        segments:
          description: The list of segments for this trip
          type: array
          minItems: 1
          items:
            type: object
            properties:
              iataCode:
                description: 2-letters IATA code of the marketing airline
                type: string
                pattern: '[A-Z0-9]{2}'
                example: BA
              flightNumber:
                description: 4 digits flight number of the marketing airline
                type: string
                pattern: '[0-9]{4}'
                example: '1234'
              serviceClass:
                description: Class of service for this segment
                type: string
                pattern: '[A-Z]{1,2}'
                example: C
              origin:
                description: The 3 letter IATA code of the departure airport
                type: string
                pattern: '[A-Z]{3}'
                example: LHR
              destination:
                description: The 3 letter IATA code of the arrival airport
                type: string
                pattern: '[A-Z]{3}'
                example: JFK
              departureTime:
                description: The scheduled departure time for this segment
                type: string
                format: datetime
                example: "2021-04-12T11:20:50.52Z"
              arrivalTime:
                description: The scheduled arrival time for this segment
                type: string
                format: datetime
                example: "2021-04-12T23:20:50.52Z"

    TravelComponentHotel:
      description: An hotel component of a trip
      type: object
      properties:
        componentType:
          description: A fixed value to identify Hotel components
          type: string
          enum:
            - hotel
        contactEmail:
          description: Primary contact email address of a traveller
          type: string
          format: email
          example: 'email@domain.com'
        amounts:
          $ref: '#/components/schemas/TravelComponentAmounts'
        folioNumber:
          description: The Hotel Confirmation Number
          type: string
          pattern: '[A-Z0-9]+'
        checkInDate:
          description: The check-in date in local time
          type: string
          format: date
          example: "2021-04-12"
        checkOutDate:
          description: The check-out date in local time
          type: string
          format: date
          example: "2021-04-13"
        roomRates:
          description: The room rates that apply for this trip
          type: array
          minItems: 1
          items:
            type: object
            properties:
              dayRateAmount:
                description: The room rate monetary value
                $ref: '#/components/schemas/Amount'
              nightCount:
                description: The number of nights at this rate
                type: integer
                example: 1

    TravelComponents:
      description: Contains the components of a trip
      type: array
      minItems: 1
      items:
        oneOf:
          - $ref: '#/components/schemas/TravelComponentAir'
          - $ref: '#/components/schemas/TravelComponentHotel'

    Intent:
      description: Describes the intent of a payment
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/Amount'
        currency:
          $ref: '#/components/schemas/Currency'
        providerCode:
          type: string
          pattern: '[A-Z0-9]+'
          example: 'AA'
        returnUrl:
          type: string
          format: uri
          example: 'https://example.com/return/?order=123456'

    3DS:
      description: Describes the result of a 3D-Secure authentication
      type: object
      properties:
        eci:
          description: E-Commerce Indicator
          type: string
          pattern: '^[0-9]{2}$'
          example: '02'
        xid:
          description: Directory Server transaction ID (xid or dsTransId)
          type: string
          format: uuid
          example: '1f88043a-7d5c-431b-be5d-00000000000'
        cavv:
          description: Cardholder Authentication Verification Value
          type: string
          format: byte
          example: 'OTkxOTA4MDkxNjMzMTYwNTUwMzY='
        version:
          description: Version of the 3DS Protocol
          type: string
          pattern: '[^[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}$'
          example: '2.1.0'
        directoryResponse:
          description: Transaction status after ARes
          type: string
          enum:
            - Y # Authenticated
            - N # Authentication failed
            - U # Not Available
            - C # Challenge Needed
            - R # Rejected
            - A # Authentication Attempt
          example: 'Y'
        authenticationResponse:
          description: Transaction status after RReq
          type: string
          enum:
            - Y # Authenticated
            - N # Authentication failed
            - U # Not Available
            - A # Authentication Attempt
            - C # Process Incomplete
        threeDSTransactionId:
          description: Universally unique transaction identifier assigned by the 3DS Server to identify a single transaction
          type: string
          format: uuid
          example: '8558c931-277b-4240-adfc-00000000000'
        transStatusReason:
          description: Transaction Status Reason
          type: string
          pattern: '^[0-9]{2}$'
          example: '01'

    Error:
      description: An error returned by Simard Pay
      type: object
      properties:
        message:
          description: Information related to the error
          type: string
          example: "Invalid Input"

  # Defines the security schemes
  securitySchemes:
    orgid_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: /oauth/authorize
          scopes:
            write:accounts: Read the accounts
            read:accounts:  Write to the accounts
            write:balances: Read the balances
            read:balances:  Write to the balances

    orgid_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
